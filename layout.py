import alias_lookup

def output(mode, chapter_index, message, extra = None): #copied from landing
    if mode == "layout":
        format = "rpy"
    else:
        format = "txt"

    for index in chapter_index:
        file = open(f"{mode}{index}.{format}","a")
        if "*" in message:
            file.write(message.replace('*',alias_lookup.alias_lookup(index,extra[0])))
        else:
            file.write(message) #? * as a wildcard for chapter index
        file.close()

def parse_layout(chapter):
    file = open(f"layout{chapter}.pwrr","r")
    #output = open(f"layout{chapter}.rpy","w")
    #output.write("#Autogenerated, do not edit.\n\n")

    graph = {}
    title = ""

    file_to_read = file.readlines()
    file.close()

    chapter_index = file_to_read.pop(0).replace('\n','').split("\t")
    file_to_read.pop(0)
    output("layout",chapter_index,"#Autogenerated, do not edit.\n\n")

    for line in file_to_read:
        array = line.split("\t")
        if len(array) == 1:
            title = array[0].replace('\n','')
        else:
            destination = array[1].replace('\n','')
            if len(array) > 2:
                direction = array[2].replace('\n','')
                if len(array) > 3:
                    subcode = array[3].replace('\n','')
                else:
                    subcode = None
            else:
                direction = None
                subcode = None

            if not title in graph:
                graph[title] = []
            if not destination in graph:
                graph[destination] = []

            graph[title].append([destination,subcode])
            if direction != '1':
                graph[destination].append([title,subcode])

    for node in graph: #THIS CODE IS MESSY AS HELL!
        if graph[node] != []:
            output("layout",chapter_index,f"label {node}_move:\n")
            output("layout",chapter_index,"    menu\n")
            output("layout",chapter_index,"        \"Where to?\"\n")
            for dest_combo in graph[node]:
                destination = dest_combo[0]
                evaluat = dest_combo[1] #?
                #dest_str = alias_lookup.alias_lookup(chapter,destination) # Version to print in menus
                output("layout",chapter_index,f"        \"*\":\n",extra = [destination])
                if evaluat:
                    output("layout",chapter_index,f"            jump {evaluat}\n")
                else:
                    output("layout",chapter_index,f"            jump {destination}_landing\n")
            output("layout",chapter_index,f"        \"Cancel\":\n")
            output("layout",chapter_index,f"            jump {node}_landing\n\n")

#parse_layout("A")
